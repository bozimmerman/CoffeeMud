<DIV ID="HELPROOT">
<h3>Plugin</h3>
A <a href="javascript:menuHelp('Plugins')">plugin</a> is represented
as a JSON document that specifies all of its features, which are
broken down below.  A minimalist plugin document looks like this:
<PRE>
{
  "name": "my minimal plugin",
  "version": 1,
  "requires": "3.6.8",
  "code": "",
  "mxp":"",
  "triggers": [],
  "aliases": [],
  "timers": []
  "menus": {}
}
</PRE>
The <B>name</B> may be any string, but try to keep it unique.  <B>Version</B>
must be an integer or real number.  <B>Version</B> is the minimum Sip/Siplet version. 
<B><a href="javascript:menuHelp('Mxp')">mxp</a></B> is a document of 
<a href="javascript:menuHelp('Entities')">MXP tags/entities</a> that your
plugin contributes.  <B>Code</B> is your message handling 
javascript.  The API is discussed in the last section.
<P>
The <B>triggers</B> field is an array of trigger objects, each of which looks like 
this:
<PRE>
{
	"name":"my trigger",
	"regex":false,
	"pattern":"mud output",
	"once":true,
	"action":"win.displayText('hi');"
}
</PRE>
The <B>name</B> of a plugin trigger is not terribly important, but is required.  <B>Regex</B>
is true if your <B>pattern</B> is a <a href="javascript:menuHelp('Regex')">regular expression</a>, 
and false if it is a simple string.  <B>Once</B> is true if the trigger should be disabled after 
its initial match, or false to continue matching.
<P>
<B>Action</B> is one of: submitInput, displayText, playSound, setEntity, runScript,
enableTrigger, disableTrigger, startTimer, clearTimer, displayAt, submitHidden, clearWindow, or sendPlugin.  These,
and the required <B>argument(s)</B> are summarized in the help for  
<a href="javascript:menuHelp('Actions')">Actions</a>.  Remember that an argument string must
be internally quoted, unless it is not a string, but one of the permitted variables.
<P>
The top level <B>aliases</B> field is an array of alias objects, each of which looks like 
this:
<PRE>
{
	"name":"my alias",
	"regex":false,
	"pattern":"/command",
	"replace":"replacement string",
	"action":"win.displayText('hi');"
}
</PRE>
The <B>name</B>, <b>regex</b>, <B>pattern</B>, <B>action</B>, and <B>argument</B> 
of a plugin alias is the same as described above for triggers, except that the 
<b>action</b> and <b>argument</b> may be empty.  The <B>replace</B> field is
the string that replaces the user input matched by the <B>pattern</B>.
<P>
The top level <B>timers</B> field is an array of timer objects, each of which looks like 
this:
<PRE>
{
	"name":"my timer",
	"delay":0,
	"option":"once"
	"trigger":true,
	"action":"win.displayText('hi');"
}
</PRE>
The <B>name</B>, <B>action</B>, and <B>argument</B> 
of a plugin timer is the same as described above for triggers.  The <b>option</b>
field must be one of 'once', 'multiple', or 'repeat'; see the help on 
<a href="javascript:menuHelp('Timers')">Timers</a> for more information on Options.
The <b>trigger</b> field is true if a timer begins its delay immediately, or false if
it must be externally triggered before counting down.  <B>Delay</B> is the number
of milliseconds (1000th of a second) that the timer delays for; for example, 5000
would be 5 seconds, and 60000 would be a minute.
<P>
<P>
The top level <B>menus</B> field is additions to the top level menu system.  Each key
is a top level menu (such as Windows, Global Options, or Help).  Each menus key then
is mapped to an array of specific menu entry json object like this:
<PRE>
"Top Menu": [{
	"n":"Option 1",
	"a":"win.displayText('hi');"
},{
	"n":"Option 2",
	"a":"win.displayText('ho');"
}]
</PRE>
The <B>n</B> entry is simply the drop-down option name, while <B>a</B> is an 
Action, which is the same as described above under Triggers.  Optional arguments
include <B>v</B>, which is a truthy variable expression that describes whether
the option is visible, and <B>e</B>, which is a truthy variable expression 
describing whether the option may be clicked, or is grayed out.
<P>
<h3>Javascript Code</h3>
Plugin code has the same <a href="javascript:menuHelp('Scripts')">Scripts</a> api
available to it, but unlike normal scripts, plugin code is sandboxed to protect 
the user installing it, which means that the code will not
have direct access to the ENTIRE mud client api or dom.  Instead, it has limited
access to the win.* and win.mapper.* methods as scripts in the Scripts help.
For other outside events, it must receive information 
from a <pre>window.onevent</pre> function, and can post messages to the client using 
<pre>window.send</pre>. More detail on the types of events and the specifics
of send messages is below, but first, here is some minimal plugin code:
<PRE style="font-size:12;">
window.onevent=function(event)
{ 
  console.log("plugin received event type " + event.type);
  var response = {
    command: 'displayText',
    data: '"i received ' + event.type + '"'
  };
  window.send(response); // send the same event back 
};
win.submitInput('LOOK');
</PRE>
The following are the events and event fields that might trigger the
window.onevent function for a plugin.  All events have a 'type' field,
and always a 'data' field, in addition to other 'extra' fields.
<table border=1 style="color:white;font-size:12;">
<TR><TD>Type</TD><TD>Extra</TD><TD>Description</TD></TR>
<TR><TD>connect</TD><TD></TD><TD>Connection made, with url</TD></TR>
<TR><TD>closesock</TD><TD></TD><TD>Connection lost, with url</TD></TR>
<TR><TD>close</TD><TD></TD><TD>Plugins window closing</TD></TR>
<TR><TD>msdp</TD><TD></TD><TD>MSDP message with msdp js object data</TD></TR>
<TR><TD>gmcp</TD><TD>command</TD><TD><a href="javascript:menuHelp('Gmcp')">GMCP</a> message with js object data</TD></TR>
<TR><TD>event</TD><TD></TD><TD>Un-typed event from trigger/alias/etc</TD></TR>
<TR><TD>variable</TD><TD>key</TD><TD>Result from fetchVariable with key,data</TD></TR>
<TR><TD>?</TD><TD>?</TD><TD>Typed event from trigger/alias/etc</TD></TR>
</table> 
<P>
If a plugin needs its own configuration, then you can take advantage of the fact
that win.displayText(...) supports MXP tags, such as INPUT, regardless of whether
MXP is actually turned on in the client.  If you need storage, localStorage.getItem, 
setItem, and removeItem are also available.  
available.  
</UL>
