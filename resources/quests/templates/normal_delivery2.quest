#!QUESTMAKER_START_SCRIPT Normal Delivery #2
#The player delivers a custom-Item from one existing mob in your world
#to an existing container in your world, such as a pit or mailbox, or
#a room where the item needs to be dropped.
#
#!QUESTMAKER_PAGE Quest Name/Criteria
#Enter the unique name and player criteria for your new quest.
#
#Quest ID:
#Enter a unique name/id for your quest:
#$QUEST_ID=$UNIQUE_QUEST_NAME=normal_delivery_2
#
#Quest Name:
#Enter a friendly displayable name for your quest:
#$QUEST_NAME=$STRING=Normal Delivery #2
#
#Quest-Player Criterium:
#You may leave this entry blank, or enter a Zapper Mask to describe what
#kinds of players may participate in this quest.  You can use this to set
#race, level, or other requirements.
#$QUEST_CRITERIA=$ZAPPERMASK
#
#!QUESTMAKER_PAGE Specify the Deliverer
#The Deliverer is the mob who will be holding the item initially. This must
#be an existing mob in your world.  
#
#Deliverer Area/Room: 
#Specify below the name of the area that your deliverer mob will be located
#in and/or the room in which the mob can be found.  You may leave both blank
#to force the quest manager to find the mob somewhere in the world, but this
#will hurt the performance of your mud, so use with care.
#Use double-quotes around multi-word areas and room ids/names.
#  
#Deliverer Area:
#$DELIVERER_AREA=($AREA)
#Deliverer Room ID:
#$DELIVERER_ROOM=($ROOMID)
#
#Deliverer mob name: 
#Specify the name of the mob who will act as the deliverer mob.  
#Use double-quotes around multi-word names.
#If you specified an area or room above, then the mob must be located there.
#You may optionally have the quest manager select a 'random' mob by entering
#a mob name of ANY MASK= followed by a Zapper Mask (see help on 
#ZAPPERMASKS for information on zapper mask syntax).
#Remember, if the quest manager can not find your mob, the quest will not
#be started.
#$DELIVERER_NAME=$NAME
#
#Announcer greeting: 
#Specify what the announcer says to people when they enter the room about their
#quest.   Use the code ${2 *} to designate the name of the mob to find.
#$QUEST_NOTIFYSTRING=$LONG_STRING=I need someone to deliver $[1 *] somewhere.
#
#Announcer instructions: 
#Specify what the announcer says to people who have accepted the quest.  This 
#should give some details about what is to be done.  You can leave this blank
#if you like.  Use the code $[1 *] to designate the name of the mob to find.
#$QUEST_INSTRUCTIONSSTRING=($LONG_STRING)=Go to that place and drop $[1 *].  Be careful!
#
#!QUESTMAKER_PAGE Specify the Destination
#The destination is either a room or a container item.
#
#Destination Area/Room: 
#Specify below the name of the area and room to take the item to.
#You may leave area blank to force the quest manager to find them somewhere in 
#the world, but this will hurt the performance of your mud, so use with care.  
#Use double-quotes around multi-word area/rooms.
#
#Destination Area:
#$DESTINATION_AREA=($AREA)
#Destination Room:
#$DESTINATION_ROOM=$ROOMID
#
#Destination Container:
#Specify below the name of the container item from the above room where
#the item must be deposited to complete the quest.  If you just want 
#the player to drop the item in the room, leave this field blank.
#$DESTINATION_CONTAINER=($NAME)
#
#Destination response: 
#You may optionally specify some additional bit of text said to
#the players after the item is placed. 
#$DELIVER_RESPONSE=($LONG_STRING)=Your task is complete.
#
#!QUESTMAKER_PAGE Deliverable item
#Create the item which the deliverer mob will give to the player to 
#be taken and given to the destination.
#
#Deliverable Item: 
#You may select from the available items below or create a 
#new item just for this quest.
#$DELIVERABLE_ITEM=$ITEMXML
#
#!QUESTMAKER_PAGE Quest Completion
#Select some rewards for completing the delivery:
#
#Quest Point?
#$QUEST_POINT=$CHOOSE=YES,NO
#Amount of money (an amount, or leave blank):
#$GOLD=($EXPRESSION)
#Amount of experience points, blank for none, or a number% for percent of exp to next level:
#$EXP=($STRING)=10%
#
#Player Faction to give to or take from:
#$FACTION=($FACTION)
#If you selected a faction above, enter a new numeric amount, 
#or enter +value to add, or --value to subtract:
#$NUMFACTION=($STRING)
#
#Select whether a player may complete this quest multiple times,
#or 'prev' to require a previous quest, if multiple found.
#$MULTIPLE=$CHOOSE=YES,NO,PREV
#
#$CATEGORY=($HIDDEN)=
#
#!QUESTMAKER_END_SCRIPT Normal Delivery #2

set name $QUEST_ID
set display $QUEST_NAME
set author $#AUTHOR
set questtype normal_delivery2
set category $CATEGORY
set instructions $QUEST_INSTRUCTIONSSTRING

set wait 1
set interval 1
quiet

set minplayers 1
set playermask $QUEST_CRITERIA

set area $DELIVERER_AREA
set room $DELIVERER_ROOM
set mobgroup
set mob reselect $DELIVERER_NAME
give stat keyplayer true
give script LOAD=$QUEST_ID_deliverer.script

set area
set room
set mobgroup
set mob
set item
import items $QUEST_ID_item.xml
set itemgroup loadeditems
set item itemgroup
give affect Property

set area $DESTINATION_AREA
set room $DESTINATION_ROOM
give script LOAD=$QUEST_ID_deliveree.script
set itemgroup
set item reselect $DESTINATION_CONTAINER
give stat keyplayer true
give affect Property

set duration 0

<?xml version="1.0"?>
<FILE><NAME>$QUEST_ID_item.xml</NAME><DATA><ITEMS>$DELIVERABLE_ITEM</ITEMS></DATA></FILE>
<FILE><NAME>$QUEST_ID_deliverer.script</NAME>
<DATA>
ONCE_PROG 100
	MPQSET * INSTRUCTIONS $i in $a wants you to '$QUEST_INSTRUCTIONSSTRING'
	if EVAL('$QUEST_ANNOUNCECHANNEL' != '')
		$QUEST_ANNOUNCECHANNEL $QUEST_NOTIFYSTRING -- Come see me for more information.
	endif
~

SPEECH_PROG quest quests quest? quests?
	if ISLIKE($n '$QUEST_CRITERIA') and ISPC($n) and ( EVAL('$MULTIPLE' != 'PREV') or QUESTWINNER($n previous) ) and !QUESTSCRIPTED($n *)
		if EVAL('$MULTIPLE' == 'YES') OR !QUESTWINNER($n *)
			sayto "$n" $QUEST_NOTIFYSTRING -- say '^yi accept^?' or '^yi accept $QUEST_NAME^?' to take on this quest.
		endif
	endif
~

# this script is for the human chosen to be the note bearer
GREET_PROG 100
	if ISLIKE($n '$QUEST_CRITERIA') and ISPC($n) and ( EVAL('$MULTIPLE' != 'PREV') or QUESTWINNER($n previous) )
		if EVAL('$MULTIPLE' == 'YES') OR !QUESTWINNER($n *)
			if !QUESTSCRIPTED($n *)
				sayto "$n" $QUEST_NOTIFYSTRING.  Say '^yi accept^?' or '^yi accept $QUEST_NAME^?', and I will give you the details.
			endif
		endif
	endif
~

FUNCTION_PROG CAN_ACCEPT
	if ISLIKE($n '$QUEST_CRITERIA') and ISPC($n) and ( EVAL('$MULTIPLE' != 'PREV') or QUESTWINNER($n previous) )
		if EVAL('$MULTIPLE' == 'YES') OR !QUESTWINNER($n *)
			if !QUESTSCRIPTED($n *)
				RETURN TRUE
			endif
		endif
	endif
	RETURN CANCEL
~

FUNCTION_PROG DO_ACCEPT
	mpscript $n INDIVIDUAL SAVABLE STATIC=LOAD=$QUEST_ID_playertrack.script
	mpqset * STATISTICS ACCEPTED
	if !HAS($n '$[1 *]')
		mpat $n mpforce $n mpoload fromfile $QUEST_ID_item.xml '$[1 *]'
		MPQSET * QUESTOBJ $b
		mpat $n mpechoat $n You receive $[1 *].
	endif
~

SPEECH_PROG p i accept $QUEST_NAME
	if CALLFUNC(CAN_ACCEPT)
		mpqset * STATISTICS ACCEPTED
		if !HAS($i '$[1 *]')
			mpoload fromfile $QUEST_ID_item.xml '$[1 *]'
		endif
		if !has($n '$[1 *]')
			give "$[1 *]" "$n"
		endif
		sayto "$n" $QUEST_INSTRUCTIONSSTRING
		mpscript $n INDIVIDUAL SAVABLE STATIC=LOAD=$QUEST_ID_playertrack.script
	endif
~
	
SPEECH_PROG p i accept
	if CALLFUNC(CAN_ACCEPT)
		mpqset * STATISTICS ACCEPTED
		if !HAS($i '$[1 *]')
			mpoload fromfile $QUEST_ID_item.xml '$[1 *]'
		endif
		if !has($n '$[1 *]')
			give "$[1 *]" "$n"
		endif
		sayto "$n" $QUEST_INSTRUCTIONSSTRING
		mpscript $n INDIVIDUAL SAVABLE STATIC=LOAD=$QUEST_ID_playertrack.script
	endif
~
	
GIVE_PROG p '$[1 *]'
	if EVAL($o == '$[1 *]')
		sayto "$n" So, you refuse?  Help me find someone else then.  Ok?
		mpjunk $o
		mpendquest $n
	endif
~
</DATA></FILE>
<FILE><NAME>$QUEST_ID_deliveree.script</NAME>
<DATA>

PUT_PROG p '$[1 *]'
	if EVAL($p == '$[1 *]') AND EVAL($o == '$[2 *]') AND EVAL('$[2 *]' != '') AND EVAL('$[2 *]' != '$[1 *]')
		if ISLIKE($n '$QUEST_CRITERIA') AND EVAL('$[1 *]' != '') and ISPC($n) and QUESTSCRIPTED($n *)
			if  EVAL('$MULTIPLE' == 'YES') OR !QUESTWINNER($n *)
				if EVAL($p == '$[1 *]')
					if EVAL('$EXP' != '')
						mpexp $n $EXP
					endif
					if EVAL('$FACTION' != '')
						mpfaction $n $FACTION +$NUMFACTION
					endif
					if EVAL('$QUEST_POINT' == 'YES') AND !QUESTWINNER($n *)
						mpoloadroom QuestPoint
						mpforce $n GET "a quest point"
						mpjunk a quest point
					endif
					if EVAL('$GOLD' != '') AND EVAL('$GOLD' > 0)
						mpoload $GOLD
						mpforce $n GET $GOLD
					endif
					mpquestwin $n *
					mpecho $DELIVER_RESPONSE
					mpendquest $n
					mpqset * STATISTICS SUCCESS
					IF EVAL('$MULTIPLE' == 'PREV')
						mptransfer $n $n
					ENDIF
				endif
			endif
		endif
	endif
~

DROP_PROG p '$[1 *]'
	if EVAL('$[2 *]' != '') AND EVAL('$[2 *]' != '$[1 *]')
		RETURN
	ENDIF
	if ISLIKE($n '$QUEST_CRITERIA') AND EVAL('$[1 *]' != '') and ISPC($n) and QUESTSCRIPTED($n *)
		if  EVAL('$MULTIPLE' == 'YES') OR !QUESTWINNER($n *)
			if EVAL($o == '$[1 *]')
				if EVAL('$EXP' != '')
					mpexp $n 10%
				endif
				if EVAL('$FACTION' != '')
					mpfaction $n $FACTION +$NUMFACTION
				endif
				if EVAL('$QUEST_POINT' == 'YES') AND !QUESTWINNER($n *)
					mpoloadroom QuestPoint
					mpforce $n GET "a quest point"
					mpjunk a quest point
				endif
				if EVAL('$GOLD' != '') AND EVAL('$GOLD' > 0)
					mpoload $GOLD
					mpforce $n GET $GOLD
				endif
				mpquestwin $n *
				mpecho $DELIVER_RESPONSE
				mpendquest $n
				mpqset * STATISTICS SUCCESS
				IF EVAL('$MULTIPLE' == 'PREV')
					mptransfer $n $n
				ENDIF
			endif
		endif
	endif
~
</DATA></FILE>
<FILE><NAME>$QUEST_ID_playertrack.script</NAME>
<DATA>
ONCE_PROG 100
	mpsetvar $i INSTRUCTIONS $QUEST_INSTRUCTIONSSTRING
	IF !isquestmobalive(1 '$QUEST_ID')
		MPENDQUEST '$QUEST_ID'
	ENDIF
~

RAND_PROG 25
	IF !isquestmobalive(1 '$QUEST_ID')
		MPENDQUEST '$QUEST_ID'
	else
		IF QVAR(* DURATION != '0')
			if QVAR(* REMAINING == '')
				MPENDQUEST $i
			else
				mpsetvar $i TIME_REMAINING $%QVAR(* REMAINING)%
			endif
		ENDIF
	ENDIF
~

QUEST_TIME_PROG * 1
	MPECHOAT $i The quest "$QUEST_NAME" has 1 minute remaining.
~

QUEST_TIME_PROG * -1
	MPECHOAT $i The quest "$QUEST_NAME" has ended.
~


</DATA></FILE>